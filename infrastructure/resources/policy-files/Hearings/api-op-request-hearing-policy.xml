<policies>
	<inbound>
		<base />
		<choose>
			<when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "SNL")">
				<cache-lookup-value key="snlAuth" variable-name="snlAuthToken" />
                <choose>
					<when condition="@(context.Variables.GetValueOrDefault("snlAuthToken","") == "")">
					<include-fragment fragment-id="hmi-snl-token-generation-policy-fragment" />
					<cache-store-value key="snlAuth" value="@(context.Request.Headers.GetValueOrDefault("Authorization", ""))" duration="2700" />
                    </when>
                    <otherwise>
                        <set-header name="Authorization" exists-action="override">
                            <value>@((String)context.Variables["snlAuthToken"])</value>
                        </set-header>
                    </otherwise>
                </choose>
				<rewrite-uri template="/" copy-unmatched-params="true" />
				<set-header name="Content-Type" exists-action="override">
                    <value>application/json; charset=utf-8</value>
                </set-header>
                <set-header name="Request-Type" exists-action="override">
                    <value>text</value>
                </set-header>
                <set-header name="Subscription-Key" exists-action="override">
                    <value>@(context.Request.Headers.GetValueOrDefault("Ocp-Apim-Subscription-Key","unknown"))</value>
                </set-header>
                <!--  Don't expose APIM subscription key to the backend. -->
                <set-header name="Ocp-Apim-Subscription-Key" exists-action="delete" />
				<set-backend-service base-url="https://#sAndLHost#/rest/hmcts/resources/hearings" />
			</when>
			<when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "MOCK")">
				<return-response>
					<set-status code="202" />
					<set-header name="Content-Type">
						<value>application/json</value>
					</set-header>
					<set-body>@{
					return new JObject(
						new JProperty("response code", 202),
						new JProperty("description", "The request was received successfully.")
					).ToString();
					}
		       		</set-body>
		        </return-response>
		    </when>
			<otherwise>
                <return-response>
                    <set-status code="400" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                    return new JObject(
                    new JProperty("message", context.Request.Headers.GetValueOrDefault("Destination-System","") + " destination doesn't support this functionality")
                    ).ToString();
                    }</set-body>
                </return-response>
            </otherwise>
		</choose>
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
        <base />
         <choose>
            <when condition="@(context.Response.StatusCode == 401 || context.Response.StatusCode == 403)">
                <cache-remove-value key="snlAuth" />
                <return-response>
						<set-status code="502" />
						<set-header name="Content-Type">
							<value>application/json</value>
						</set-header>
						<set-body>@{
						return new JObject(
							new JProperty("message", "Successfully authenticated by HMI, however target system failed to authenticate. Please try again.")
						    ).ToString();
						}
					</set-body>
				</return-response>
            </when>
        </choose>
    </outbound>
	<on-error>
		<base />
	</on-error>
</policies>