<policies>
    <inbound>
        <base />
        <set-variable name="mandatoryMissing" value="@{
                string[] qryPrmKeys = context.Request.Url.Query.Keys.ToArray();

                return !qryPrmKeys.Contains("updated_since");
            }" />
        <choose>
            <when condition="@((bool)context.Variables["mandatoryMissing"])">
                <include-fragment fragment-id="hmi-missing-mandatory-updated-since-response" />
            </when>
        </choose>
        <set-variable name="invalidQueryParams" value="@{
                string[] qryPrmKeys = context.Request.Url.Query.Keys.ToArray();
                string[] allowedKeys = {"updated_since","per_page","page"};
                bool invalidQueryParam = false;
                if(context.Request.Url.Query.Count &gt; 0){
                    for (int i = 0; i &lt; qryPrmKeys.Count(); i++)
                    {
                        bool keyFound = false;
                        for (int j = 0; j &lt; allowedKeys.Count(); j++)
                        {
                            if (qryPrmKeys[i] == allowedKeys[j]){
                                keyFound = true;
                                break;
                            }
                        }
                        if(!keyFound){
                            invalidQueryParam = true;
                            break;
                        }
                    }
                }

                return invalidQueryParam;
            }" />
        <choose>
            <when condition="@(context.Request.Url.Query.Count > 3 || (bool)context.Variables["invalidQueryParams"])">
                <include-fragment fragment-id="hmi-invalid-query-parameters-response" />
            </when>
            <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "ELINKS")">
                <include-fragment fragment-id="hmi-elinks-auth-token" />
                <rewrite-uri template="/people" copy-unmatched-params="true" />
                <set-backend-service base-url="https://#elinksHost#/elinks/api/v5" />
            </when>
            <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "MOCK")">
                <include-fragment fragment-id="hmi-elinks-mock-multi-person-response" />
            </when>
            <otherwise>
                <return-response>
                    <set-status code="400" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                    return new JObject(
                    new JProperty("message", context.Request.Headers.GetValueOrDefault("Destination-System","") + " destination doesn't support this functionality")
                    ).ToString();
                    }</set-body>
                </return-response>
            </otherwise>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
        <choose>
            <when condition="@(context.Response.StatusCode == 401 || context.Response.StatusCode == 403)">
                <return-response>
                    <set-status code="502" />
                    <set-header name="Content-Type">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        return new JObject(
                            new JProperty("message", "Successfully authenticated by HMI, however target system failed to authenticate. Please try again.")
                        ).ToString();
                        }
                    </set-body>
                </return-response>
            </when>
        </choose>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
