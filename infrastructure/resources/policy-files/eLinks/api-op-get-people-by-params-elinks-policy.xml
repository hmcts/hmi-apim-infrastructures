<policies>
    <inbound>
        <base />
        <set-variable name="mandatoryMissing" value="@{
                string[] qryPrmKeys = context.Request.Url.Query.Keys.ToArray();

                return !qryPrmKeys.Contains("updated_since");
            }" />
        <choose>
            <when condition="@((bool)context.Variables["mandatoryMissing"])">
                <include-fragment fragment-id="missing_mandatory_updated_since_response" />
            </when>
        </choose>
        <set-variable name="invalidQueryParams" value="@{
                string[] qryPrmKeys = context.Request.Url.Query.Keys.ToArray();
                string[] allowedKeys = {"updated_since","per_page","page"};
                bool invalidQueryParam = false;
                if(context.Request.Url.Query.Count &gt; 0){
                    for (int i = 0; i &lt; qryPrmKeys.Count(); i++)
                    {
                        bool keyFound = false;
                        for (int j = 0; j &lt; allowedKeys.Count(); j++)
                        {
                            if (qryPrmKeys[i] == allowedKeys[j]){
                                keyFound = true;
                                break;
                            }
                        }
                        if(!keyFound){
                            invalidQueryParam = true;
                            break;
                        }
                    }
                }

                return invalidQueryParam;
            }" />
        <choose>
            <when condition="@(context.Request.Url.Query.Count > 3 || (bool)context.Variables["invalidQueryParams"])">
                <include-fragment fragment-id="invalid_query_parameters_response" />
            </when>
            <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "ELINKS")">
                <include-fragment fragment-id="elinks_auth_token_generation" />
            </when>
            <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "MOCK")">
                <include-fragment fragment-id="elinks_mock_multi_person_response" />
            </when>
            <otherwise>
                <include-fragment fragment-id="invalid_destination_response" />
            </otherwise>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
        <choose>
            <when condition="@(context.Response.StatusCode == 401 || context.Response.StatusCode == 403)">
                <include-fragment fragment-id="failed_destination_authentication_response" />
            </when>
        </choose>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
